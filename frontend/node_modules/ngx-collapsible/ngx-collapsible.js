import { Directive, Input, NgModule, ViewContainerRef } from '@angular/core';
import { CommonModule } from '@angular/common';

class CollapsibleDirective {
    /**
     * @param {?} viewContainer
     */
    constructor(viewContainer) {
        this.viewContainer = viewContainer;
        this.selected = [];
        this.openHeaderClass = 'header-open';
        this.openContentClass = 'content-open';
        this.collapsedHeaderClass = 'header-collapsed';
        this.collapsedContentClass = 'content-collapsed';
        this.headers = [];
        this.contents = [];
        this.toggleAccordion = (key) => {
            if (this.selected[0] === key) {
                this.selected = [];
            }
            else {
                this.selected = [key];
            }
        };
        this.toggleClasses = (element, openClass, collapsedClass, isCollapsed = true) => {
            const /** @type {?} */ allClasses = element.className.split(' ');
            const /** @type {?} */ classToAdd = isCollapsed ? collapsedClass : openClass;
            const /** @type {?} */ addIndex = allClasses.indexOf(classToAdd);
            if (addIndex === -1) {
                allClasses.push(classToAdd);
            }
            const /** @type {?} */ classToRemove = isCollapsed ? openClass : collapsedClass;
            const /** @type {?} */ removeIndex = allClasses.indexOf(classToRemove);
            if (removeIndex > -1) {
                allClasses.splice(removeIndex, 1);
            }
            element.className = allClasses.join(' ');
        };
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (this.accordion) {
            this.selected = this.selected.slice(0, 1);
        }
        this.updateView();
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        const /** @type {?} */ element = this.viewContainer.element.nativeElement;
        this.headers = [].slice.call(element.querySelectorAll('[collapsible-header]'));
        this.contents = [].slice.call(element.querySelectorAll('[collapsible-content]'));
        this.headers.forEach(el => {
            el.addEventListener('click', () => {
                const /** @type {?} */ key = el.getAttribute('collapsible-header');
                if (key === null) {
                    return;
                }
                if (this.accordion) {
                    this.toggleAccordion(key);
                }
                else {
                    this.toggleCollapsible(key);
                }
                this.updateView();
            });
        });
        this.updateView();
    }
    /**
     * @param {?} key
     * @return {?}
     */
    toggleCollapsible(key) {
        const /** @type {?} */ index = this.selected.indexOf(key);
        if (index === -1) {
            this.selected.push(key);
        }
        else {
            this.selected.splice(index, 1);
        }
    }
    /**
     * @return {?}
     */
    updateView() {
        this.headers.forEach(el => {
            const /** @type {?} */ key = el.getAttribute('collapsible-header');
            const /** @type {?} */ collapse = this.selected.indexOf(key) === -1;
            this.toggleClasses(el, this.openHeaderClass, this.collapsedHeaderClass, collapse);
        });
        this.contents.forEach(el => {
            const /** @type {?} */ key = el.getAttribute('collapsible-content');
            const /** @type {?} */ collapse = this.selected.indexOf(key) === -1;
            this.toggleClasses(el, this.openContentClass, this.collapsedContentClass, collapse);
        });
    }
}
CollapsibleDirective.decorators = [
    { type: Directive, args: [{
                selector: '[ngxCollapsible]'
            },] },
];
/**
 * @nocollapse
 */
CollapsibleDirective.ctorParameters = () => [
    { type: ViewContainerRef, },
];
CollapsibleDirective.propDecorators = {
    'accordion': [{ type: Input },],
    'selected': [{ type: Input },],
    'openHeaderClass': [{ type: Input },],
    'openContentClass': [{ type: Input },],
    'collapsedHeaderClass': [{ type: Input },],
    'collapsedContentClass': [{ type: Input },],
};

class CollapsibleModule {
}
CollapsibleModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule
                ],
                declarations: [CollapsibleDirective],
                exports: [CollapsibleDirective],
            },] },
];
/**
 * @nocollapse
 */
CollapsibleModule.ctorParameters = () => [];

/**
 * Generated bundle index. Do not edit.
 */

export { CollapsibleModule, CollapsibleDirective as Éµa };
//# sourceMappingURL=ngx-collapsible.js.map
