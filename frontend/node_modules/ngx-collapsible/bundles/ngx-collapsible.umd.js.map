{"version":3,"file":"ngx-collapsible.umd.js","sources":["~/ngx-collapsible/src/app/modules/collapsible/collapsible.module.ts","~/ngx-collapsible/src/app/modules/collapsible/collapsible.directive.ts"],"sourcesContent":["import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { CollapsibleDirective } from './collapsible.directive';\nexport class CollapsibleModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [\n    CommonModule\n  ],\n  declarations: [CollapsibleDirective],\n  exports: [CollapsibleDirective],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction CollapsibleModule_tsickle_Closure_declarations() {\n/** @type {?} */\nCollapsibleModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCollapsibleModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Directive, Input, OnChanges, SimpleChanges, AfterViewInit, ViewContainerRef } from '@angular/core';\nexport class CollapsibleDirective implements OnChanges, AfterViewInit {\n\n   accordion: false;\n   selected: string[] = [];\n\n   openHeaderClass = 'header-open';\n   openContentClass = 'content-open';\n   collapsedHeaderClass = 'header-collapsed';\n   collapsedContentClass = 'content-collapsed';\nprivate headers: HTMLElement[] = [];\nprivate contents: HTMLElement[] = [];\n/**\n * @param {?} viewContainer\n */\nconstructor(private viewContainer: ViewContainerRef) { }\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges) {\n    if (this.accordion) { this.selected = this.selected.slice(0, 1); }\n    this.updateView();\n  }\n/**\n * @return {?}\n */\nngAfterViewInit() {\n    const /** @type {?} */ element = this.viewContainer.element.nativeElement;\n\n    this.headers = [].slice.call(element.querySelectorAll('[collapsible-header]'));\n    this.contents = [].slice.call(element.querySelectorAll('[collapsible-content]'));\n\n    this.headers.forEach(el => {\n      el.addEventListener('click', () => {\n\n        const /** @type {?} */ key = el.getAttribute('collapsible-header');\n        if (key === null) { return; }\n\n        if (this.accordion) {\n          this.toggleAccordion(key);\n        } else {\n          this.toggleCollapsible(key);\n        }\n\n        this.updateView();\n      });\n\n    });\n\n    this.updateView();\n  }\n/**\n * @param {?} key\n * @return {?}\n */\nprivate toggleCollapsible(key: string) {\n    const /** @type {?} */ index = this.selected.indexOf(key);\n    if (index === -1) {\n      this.selected.push(key);\n    } else {\n      this.selected.splice(index, 1);\n    }\n  }\nprivate toggleAccordion = (key: string) => {\n    if (this.selected[0] === key) {\n      this.selected = [];\n    } else {\n      this.selected = [key];\n    }\n  }\n/**\n * @return {?}\n */\nprivate updateView() {\n\n    this.headers.forEach(el => {\n      const /** @type {?} */ key = el.getAttribute('collapsible-header');\n      const /** @type {?} */ collapse = this.selected.indexOf(key) === -1;\n      this.toggleClasses(el, this.openHeaderClass, this.collapsedHeaderClass, collapse);\n    });\n\n    this.contents.forEach(el => {\n      const /** @type {?} */ key = el.getAttribute('collapsible-content');\n      const /** @type {?} */ collapse = this.selected.indexOf(key) === -1;\n      this.toggleClasses(el, this.openContentClass, this.collapsedContentClass, collapse);\n    });\n\n  }\nprivate toggleClasses = (element: HTMLElement, openClass: string, collapsedClass: string, isCollapsed = true) => {\n\n    const /** @type {?} */ allClasses = element.className.split(' ');\n\n    const /** @type {?} */ classToAdd = isCollapsed ? collapsedClass : openClass;\n    const /** @type {?} */ addIndex = allClasses.indexOf(classToAdd);\n    if (addIndex === -1) { allClasses.push(classToAdd); }\n\n    const /** @type {?} */ classToRemove = isCollapsed ? openClass : collapsedClass;\n    const /** @type {?} */ removeIndex = allClasses.indexOf(classToRemove);\n    if (removeIndex > -1) { allClasses.splice(removeIndex, 1); }\n\n    element.className = allClasses.join(' ');\n  }\n\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[ngxCollapsible]'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'accordion': [{ type: Input },],\n'selected': [{ type: Input },],\n'openHeaderClass': [{ type: Input },],\n'openContentClass': [{ type: Input },],\n'collapsedHeaderClass': [{ type: Input },],\n'collapsedContentClass': [{ type: Input },],\n};\n}\n\nfunction CollapsibleDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nCollapsibleDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCollapsibleDirective.ctorParameters;\n/** @type {?} */\nCollapsibleDirective.propDecorators;\n/** @type {?} */\nCollapsibleDirective.prototype.accordion;\n/** @type {?} */\nCollapsibleDirective.prototype.selected;\n/** @type {?} */\nCollapsibleDirective.prototype.openHeaderClass;\n/** @type {?} */\nCollapsibleDirective.prototype.openContentClass;\n/** @type {?} */\nCollapsibleDirective.prototype.collapsedHeaderClass;\n/** @type {?} */\nCollapsibleDirective.prototype.collapsedContentClass;\n/** @type {?} */\nCollapsibleDirective.prototype.headers;\n/** @type {?} */\nCollapsibleDirective.prototype.contents;\n/** @type {?} */\nCollapsibleDirective.prototype.toggleAccordion;\n/** @type {?} */\nCollapsibleDirective.prototype.toggleClasses;\n/** @type {?} */\nCollapsibleDirective.prototype.viewContainer;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"],"names":["CommonModule","NgModule","Input","ViewContainerRef","Directive"],"mappings":"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"}
